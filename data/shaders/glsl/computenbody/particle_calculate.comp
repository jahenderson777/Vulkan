
#version 450

#ifndef PI
#define PI 3.1415926
#endif

struct Particle {
	vec4 pos;
	vec4 vel;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos {
   Particle particles[ ];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO {
	float deltaT;
	int particleCount;
} ubo;

/*layout (constant_id = 0) const int SHARED_DATA_SIZE = 1;
layout (constant_id = 1) const float GRAVITY = 0.002;
layout (constant_id = 2) const float POWER = 0.75;
layout (constant_id = 3) const float SOFTEN = 0.0075;*/

// Share data between computer shader invocations to speed up caluclations
//shared vec4 sharedData[SHARED_DATA_SIZE];


#define QUATERNION_IDENTITY vec4(0, 0, 0, 1)


// Quaternion multiplication
// http://mathworld.wolfram.com/Quaternion.html
vec4 qmul(vec4 q1, vec4 q2) {
	return vec4(
		q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
		q1.w * q2.w - dot(q1.xyz, q2.xyz)
	);
}

// Vector rotation with a quaternion
// http://mathworld.wolfram.com/Quaternion.html
vec3 rotate_vector(vec3 v, vec4 r) {
	vec4 r_c = r * vec4(-1, -1, -1, 1);
	return qmul(r, qmul(vec4(v, 0), r_c)).xyz;
}

// A given angle of rotation about a given axis
vec4 rotate_angle_axis(float angle, vec3 axis) {
	float sn = sin(angle * 0.5);
	float cs = cos(angle * 0.5);
	return vec4(axis * sn, cs);
}

vec4 q_conj(vec4 q) {
	return vec4(-q.x, -q.y, -q.z, q.w);
}


// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl
vec4 q_slerp(vec4 a, vec4 b, float t) {
    // if either input is zero, return the other.
    if (length(a) == 0.0) {
        if (length(b) == 0.0) {
            return QUATERNION_IDENTITY;
        }
        return b;
    } else if (length(b) == 0.0) {
        return a;
    }

    float cosHalfAngle = a.w * b.w + dot(a.xyz, b.xyz);

    if (cosHalfAngle >= 1.0 || cosHalfAngle <= -1.0) {
        return a;
    } else if (cosHalfAngle < 0.0) {
        b.xyz = -b.xyz;
        b.w = -b.w;
        cosHalfAngle = -cosHalfAngle;
    }

    float blendA;
    float blendB;
    if (cosHalfAngle < 0.99) {
        // do proper slerp for big angles
        float halfAngle = acos(cosHalfAngle);
        float sinHalfAngle = sin(halfAngle);
        float oneOverSinHalfAngle = 1.0 / sinHalfAngle;
        blendA = sin(halfAngle * (1.0 - t)) * oneOverSinHalfAngle;
        blendB = sin(halfAngle * t) * oneOverSinHalfAngle;
    } else {
        // do lerp if angle is really small.
        blendA = 1.0 - t;
        blendB = t;
    }

    vec4 result = vec4(blendA * a.xyz + blendB * b.xyz, blendA * a.w + blendB * b.w);
    if (length(result) > 0.0) {
        return normalize(result);
    }
    return QUATERNION_IDENTITY;
}

void main() {
	uint index = gl_GlobalInvocationID.x; // SSBO index
	if (index >= ubo.particleCount) 
		return;	

    int lightDarkSplit = ubo.particleCount / 8;
    bool indexIsLight = index < lightDarkSplit;
    
	vec3 position = particles[index].pos.xyz;
    vec3 orient = particles[index].vel.xyz;
    vec3 totalDeltaPos = vec3(0.0);
    vec3 totalDeltaOrient = vec3(0.0);
    
    vec3 c = (vec3(0.0) - position) / 6.0;
    float totalForce = 0.0;
    float theta = 1.0;

    if (indexIsLight) {
        for (int i = 0; i < lightDarkSplit; i++) {                 // LIGHT -> LIGHT
            vec3 deltaPos = particles[i].pos.xyz - position;
            float l = 1.0 + 40.0 * length(deltaPos);
            float f = 1.0 / (l*l*l*l);
            totalDeltaPos += deltaPos * f;
            totalDeltaOrient += particles[i].vel.xyz * f;
            theta *= 1.0 - f / 6.0;
        }
        for (int i = lightDarkSplit; i < ubo.particleCount; i++) { // LIGHT -> DARK
            vec3 deltaPos = particles[i].pos.xyz - position;
            float l = 1.0 + 20.0 * length(deltaPos);
            float f = 1.0 / (l*l*l*l);
            totalDeltaPos += deltaPos * f;
            //totalDeltaOrient += particles[i].vel.xyz * f;
            //theta *= 1.0 - f / 6.0;
        }
    } else {
        for (int i = 0; i < lightDarkSplit; i++) {                 // DARK  -> LIGHT
            vec3 deltaPos = particles[i].pos.xyz - position;
            float l = 1.0 + 20.0 * length(deltaPos);
            float f = 1.0 / (l*l*l*l);
            totalDeltaPos += deltaPos * f;
            //totalDeltaOrient += particles[i].vel.xyz * f;
            //theta *= 1.0 - f / 6.0;
        }
        for (int i = lightDarkSplit; i < ubo.particleCount; i++) { // DARK  -> DARK
            vec3 deltaPos = particles[i].pos.xyz - position;
            float l = 1.0 + 20.0 * length(deltaPos);
            float f = 1.0 / (l*l*l*l);
            totalDeltaPos += deltaPos * f;
            //totalDeltaOrient += particles[i].vel.xyz * f;
            //theta *= 1.0 - f / 6.0;
        }
    }
    
	/*for (int i = 0; i < ubo.particleCount; i ++) {
        bool iIsDark = i > darkLightSplit;
        vec3 deltaPos = particles[i].pos.xyz - position;
        float targetDistance = 1000.0 * length(deltaPos);
        if (targetDistance > 28.0) {
            float scale = 3.0;
            if (!indexIsDark) {
                scale = 0.4;
            }
            if (!indexIsDark && iIsDark) {
                scale = 12.0;
            }
            if (!indexIsDark && !iIsDark && targetDistance > 1400.0) {
                scale = 0.0;
            }
            scale *= 60000.0 / pow(targetDistance, 3.5);
            totalForce += scale;
            totalDeltaPos += deltaPos * scale;
            if (!indexIsDark && !iIsDark && targetDistance < 150.0) {
                orient = q_slerp(orient, particles[i].vel, scale / (scale + 1.0));
                //totalDeltaOrient += particles[i].vel * scale * 0.1;
            }
            
        }
	}*/
    orient = normalize(orient + totalDeltaOrient);
    particles[index].vel.xyz = orient;
    
    if (indexIsLight) {
        //totalDeltaPos = rotate_vector(totalDeltaPos,  q_slerp(QUATERNION_IDENTITY, orient, totalForce / (totalForce + 1.0))); //totalForce / (totalForce + 1.0)
        vec4 qRot = rotate_angle_axis( PI - theta * PI, orient);
        totalDeltaPos = rotate_vector(totalDeltaPos, qRot);
        particles[index].pos.xyz += totalDeltaPos;
        particles[index].pos.w = theta;
    } 
    else {
        particles[index].pos.xyz -= totalDeltaPos - c*c*c;
        particles[index].pos.w = 0.1;
    }
}
